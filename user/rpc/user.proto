syntax = "proto3";

package user;

option go_package = "./";

// User 用户信息消息体
// 包含用户的完整信息，用于gRPC服务间的数据传输
message User {
    int64 UserId = 1;      // 用户唯一标识ID，主键
    string Phone = 2;      // 用户手机号，用于登录验证，必须唯一
    string Email = 3;      // 用户邮箱地址，可选字段
    string Password = 4;   // 用户密码，存储时应加密处理
    string Nickname = 5;   // 用户昵称，用于显示
    string Avatar = 6;     // 用户头像URL地址
    string Gender = 7;     // 用户性别："male"/"female"/"unknown"
    int64 BirthDate = 8;   // 出生日期，Unix时间戳（毫秒）
    string Role = 9;       // 用户角色："admin"/"user"/"vip"等
    int64 Status = 10;     // 用户状态：0-正常 1-禁用 2-删除
    int64 createAt = 11;   // 账户创建时间，Unix时间戳（毫秒）
    int64 updateAt = 12;   // 最后更新时间，Unix时间戳（毫秒）
}
// UserLoginReq 用户登录请求消息
// 支持两种登录方式：手机号登录（推荐）或用户ID登录
message UserLoginReq {
    string Phone = 1;      // 手机号，推荐的登录方式
    int64 UserId = 2;      // 用户ID，备选登录方式
    string Password = 3;   // 用户密码，明文传输（建议使用HTTPS）
}

// UserLoginResp 用户登录响应消息
// 登录成功后返回JWT访问令牌
message UserLoginResp {
    string Token = 1;      // JWT访问令牌，用于后续API调用的身份验证
}

// UserRegisterReq 用户注册请求消息
// 新用户注册时需要提供的基本信息
message UserRegisterReq {
    string Phone = 1;      // 手机号，必须唯一，作为登录凭证
    string Password = 2;   // 用户密码，建议8位以上包含字母数字
    string Role = 3;       // 用户角色，默认为"user"
}

// UserRegisterResp 用户注册响应消息
// 注册成功后返回用户ID和访问令牌，实现注册即登录
message UserRegisterResp {
    string Token = 1;      // JWT访问令牌，注册成功后可直接使用
    int64 UserId = 2;      // 新创建的用户ID
}

// UserDeleteReq 用户删除请求消息
// 支持通过手机号或用户ID删除账户，需要密码验证确保安全
message UserDeleteReq {
    string Phone = 1;      // 要删除用户的手机号
    int64 UserId = 2;      // 要删除的用户ID
    string Password = 3;   // 用户密码，用于身份验证
}

// UserDeleteResp 用户删除响应消息
// 返回被删除的用户信息作为操作确认
message UserDeleteResp {
    User User = 1;         // 被删除的用户完整信息
}

// UserUpdateReq 用户更新请求消息
// 用于更新用户信息，User对象中的UserId字段必填，其他字段按需更新
message UserUpdateReq {
    User User = 1;         // 包含更新字段的用户信息，UserId必填
}

// UserUpdateResp 用户更新响应消息
// 返回更新后的完整用户信息
message UserUpdateResp {
    User User = 1;         // 更新后的用户完整信息
}

// UserQueryReq 用户查询请求消息
// 根据用户ID和查询类型获取用户信息
message UserQueryReq {
    int64 UserId = 1;      // 要查询的用户ID
    string type = 2;       // 查询类型："basic"-基本信息 "full"-完整信息
}

// UserQueryResp 用户查询响应消息
// 根据查询类型返回对应的用户信息
message UserQueryResp {
    User User = 1;         // 用户信息，内容根据type参数决定
}

// Relations 用户关系消息体
// 定义用户之间的各种社交关系，如好友、关注、拉黑等
message Relations {
    int64 RelationsId = 1;       // 关系记录唯一标识ID
    int64 UserId = 2;            // 发起关系的用户ID
    int64 OtherId = 3;           // 关系目标用户ID
    int64 RelationshipType = 4;  // 关系类型：1-好友 2-关注 3-拉黑 4-屏蔽
    int64 createAt = 5;          // 关系建立时间，Unix时间戳（毫秒）
    int64 updateAt = 6;          // 关系最后更新时间，Unix时间戳（毫秒）
}
// UserRelationsUpdateReq 用户关系更新请求消息
// 用于建立、修改或删除用户之间的关系
message UserRelationsUpdateReq {
    int64 UserId = 1;            // 发起操作的用户ID
    int64 OUserId = 2;           // 目标用户ID
    int64 RelationshipType = 3;  // 关系类型：1-好友 2-关注 3-拉黑 4-屏蔽 0-删除关系
}

// UserRelationsUpdateResp 用户关系更新响应消息
// 返回更新后的关系详细信息
message UserRelationsUpdateResp {
    Relations Relations = 1;     // 更新后的关系详细信息
}
// UserRelationsGetReq 用户关系查询请求消息
// 查询两个用户之间的关系状态
message UserRelationsGetReq {
    int64 UserId = 1;            // 查询发起用户ID
    int64 OUserId = 2;           // 查询目标用户ID
}

// UserRelationsGetResp 用户关系查询响应消息
// 返回两个用户之间的关系详情
message UserRelationsGetResp {
    Relations Relations = 1;     // 用户关系详细信息，如果无关系则为空
}
// UserService 用户管理服务
// 提供用户账户的完整生命周期管理，包括注册、登录、信息维护等功能
service UserService {
    // UserLogin 用户登录
    // 验证用户凭证并返回JWT访问令牌
    rpc UserLogin (UserLoginReq) returns (UserLoginResp);
    
    // UserRegister 用户注册
    // 创建新用户账户，注册成功后自动登录
    rpc UserRegister (UserRegisterReq) returns (UserRegisterResp);
    
    // UserDelete 用户删除
    // 删除用户账户，通常执行软删除以保留数据完整性
    rpc UserDelete (UserDeleteReq) returns (UserDeleteResp);
    
    // UserUpdate 用户信息更新
    // 更新用户的基本信息，如昵称、头像、个人资料等
    rpc UserUpdate (UserUpdateReq) returns (UserUpdateResp);
    
    // UserQuery 用户信息查询
    // 根据用户ID和查询类型获取用户信息
    rpc UserQuery (UserQueryReq) returns (UserQueryResp);
}

// RelationsService 用户关系管理服务
// 处理用户之间的社交关系，如好友关系、关注关系、拉黑等
service RelationsService {
    // UserRelationsUpdate 用户关系更新
    // 建立、修改或删除用户之间的关系
    rpc UserRelationsUpdate (UserRelationsUpdateReq) returns (UserRelationsUpdateResp);
    
    // UserRelationsGet 用户关系查询
    // 查询两个用户之间的关系状态和详细信息
    rpc UserRelationsGet (UserRelationsGetReq) returns (UserRelationsGetResp);
}


