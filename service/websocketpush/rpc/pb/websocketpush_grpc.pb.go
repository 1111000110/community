// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: websocketpush.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WebsocketPush_WebSocketPush_FullMethodName = "/websocketPush.WebsocketPush/WebSocketPush"
)

// WebsocketPushClient is the client API for WebsocketPush service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketPushClient interface {
	WebSocketPush(ctx context.Context, in *WebSocketPushReq, opts ...grpc.CallOption) (*WebSocketPushResp, error)
}

type websocketPushClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketPushClient(cc grpc.ClientConnInterface) WebsocketPushClient {
	return &websocketPushClient{cc}
}

func (c *websocketPushClient) WebSocketPush(ctx context.Context, in *WebSocketPushReq, opts ...grpc.CallOption) (*WebSocketPushResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WebSocketPushResp)
	err := c.cc.Invoke(ctx, WebsocketPush_WebSocketPush_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketPushServer is the server API for WebsocketPush service.
// All implementations must embed UnimplementedWebsocketPushServer
// for forward compatibility.
type WebsocketPushServer interface {
	WebSocketPush(context.Context, *WebSocketPushReq) (*WebSocketPushResp, error)
	mustEmbedUnimplementedWebsocketPushServer()
}

// UnimplementedWebsocketPushServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebsocketPushServer struct{}

func (UnimplementedWebsocketPushServer) WebSocketPush(context.Context, *WebSocketPushReq) (*WebSocketPushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method WebSocketPush not implemented")
}
func (UnimplementedWebsocketPushServer) mustEmbedUnimplementedWebsocketPushServer() {}
func (UnimplementedWebsocketPushServer) testEmbeddedByValue()                       {}

// UnsafeWebsocketPushServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketPushServer will
// result in compilation errors.
type UnsafeWebsocketPushServer interface {
	mustEmbedUnimplementedWebsocketPushServer()
}

func RegisterWebsocketPushServer(s grpc.ServiceRegistrar, srv WebsocketPushServer) {
	// If the following call pancis, it indicates UnimplementedWebsocketPushServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WebsocketPush_ServiceDesc, srv)
}

func _WebsocketPush_WebSocketPush_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WebSocketPushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketPushServer).WebSocketPush(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WebsocketPush_WebSocketPush_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketPushServer).WebSocketPush(ctx, req.(*WebSocketPushReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebsocketPush_ServiceDesc is the grpc.ServiceDesc for WebsocketPush service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebsocketPush_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websocketPush.WebsocketPush",
	HandlerType: (*WebsocketPushServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "WebSocketPush",
			Handler:    _WebsocketPush_WebSocketPush_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websocketpush.proto",
}
