// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: post.proto

package postservice

import (
	"context"

	"community/service/post/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Post           = __.Post
	PostCreateReq  = __.PostCreateReq
	PostCreateResp = __.PostCreateResp
	PostDeleteReq  = __.PostDeleteReq
	PostDeleteResp = __.PostDeleteResp
	PostDetailReq  = __.PostDetailReq
	PostDetailResp = __.PostDetailResp
	PostListReq    = __.PostListReq
	PostListResp   = __.PostListResp
	PostUpdateReq  = __.PostUpdateReq
	PostUpdateResp = __.PostUpdateResp

	PostService interface {
		PostCreate(ctx context.Context, in *PostCreateReq, opts ...grpc.CallOption) (*PostCreateResp, error)
		PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*PostDeleteResp, error)
		PostUpdate(ctx context.Context, in *PostUpdateReq, opts ...grpc.CallOption) (*PostUpdateResp, error)
		PostDetail(ctx context.Context, in *PostDetailReq, opts ...grpc.CallOption) (*PostDetailResp, error)
		PostList(ctx context.Context, in *PostListReq, opts ...grpc.CallOption) (*PostListResp, error)
	}

	defaultPostService struct {
		cli zrpc.Client
	}
)

func NewPostService(cli zrpc.Client) PostService {
	return &defaultPostService{
		cli: cli,
	}
}

func (m *defaultPostService) PostCreate(ctx context.Context, in *PostCreateReq, opts ...grpc.CallOption) (*PostCreateResp, error) {
	client := __.NewPostServiceClient(m.cli.Conn())
	return client.PostCreate(ctx, in, opts...)
}

func (m *defaultPostService) PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*PostDeleteResp, error) {
	client := __.NewPostServiceClient(m.cli.Conn())
	return client.PostDelete(ctx, in, opts...)
}

func (m *defaultPostService) PostUpdate(ctx context.Context, in *PostUpdateReq, opts ...grpc.CallOption) (*PostUpdateResp, error) {
	client := __.NewPostServiceClient(m.cli.Conn())
	return client.PostUpdate(ctx, in, opts...)
}

func (m *defaultPostService) PostDetail(ctx context.Context, in *PostDetailReq, opts ...grpc.CallOption) (*PostDetailResp, error) {
	client := __.NewPostServiceClient(m.cli.Conn())
	return client.PostDetail(ctx, in, opts...)
}

func (m *defaultPostService) PostList(ctx context.Context, in *PostListReq, opts ...grpc.CallOption) (*PostListResp, error) {
	client := __.NewPostServiceClient(m.cli.Conn())
	return client.PostList(ctx, in, opts...)
}
