// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.19.4
// source: post.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PostService_PostCreate_FullMethodName = "/post.PostService/PostCreate"
	PostService_PostDelete_FullMethodName = "/post.PostService/PostDelete"
	PostService_PostUpdate_FullMethodName = "/post.PostService/PostUpdate"
	PostService_PostDetail_FullMethodName = "/post.PostService/PostDetail"
	PostService_PostList_FullMethodName   = "/post.PostService/PostList"
)

// PostServiceClient is the client API for PostService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 帖子服务
type PostServiceClient interface {
	PostCreate(ctx context.Context, in *PostCreateReq, opts ...grpc.CallOption) (*PostCreateResp, error)
	PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*PostDeleteResp, error)
	PostUpdate(ctx context.Context, in *PostUpdateReq, opts ...grpc.CallOption) (*PostUpdateResp, error)
	PostDetail(ctx context.Context, in *PostDetailReq, opts ...grpc.CallOption) (*PostDetailResp, error)
	PostList(ctx context.Context, in *PostListReq, opts ...grpc.CallOption) (*PostListResp, error)
}

type postServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPostServiceClient(cc grpc.ClientConnInterface) PostServiceClient {
	return &postServiceClient{cc}
}

func (c *postServiceClient) PostCreate(ctx context.Context, in *PostCreateReq, opts ...grpc.CallOption) (*PostCreateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostCreateResp)
	err := c.cc.Invoke(ctx, PostService_PostCreate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PostDelete(ctx context.Context, in *PostDeleteReq, opts ...grpc.CallOption) (*PostDeleteResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDeleteResp)
	err := c.cc.Invoke(ctx, PostService_PostDelete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PostUpdate(ctx context.Context, in *PostUpdateReq, opts ...grpc.CallOption) (*PostUpdateResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostUpdateResp)
	err := c.cc.Invoke(ctx, PostService_PostUpdate_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PostDetail(ctx context.Context, in *PostDetailReq, opts ...grpc.CallOption) (*PostDetailResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostDetailResp)
	err := c.cc.Invoke(ctx, PostService_PostDetail_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *postServiceClient) PostList(ctx context.Context, in *PostListReq, opts ...grpc.CallOption) (*PostListResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PostListResp)
	err := c.cc.Invoke(ctx, PostService_PostList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostServiceServer is the server API for PostService service.
// All implementations must embed UnimplementedPostServiceServer
// for forward compatibility.
//
// 帖子服务
type PostServiceServer interface {
	PostCreate(context.Context, *PostCreateReq) (*PostCreateResp, error)
	PostDelete(context.Context, *PostDeleteReq) (*PostDeleteResp, error)
	PostUpdate(context.Context, *PostUpdateReq) (*PostUpdateResp, error)
	PostDetail(context.Context, *PostDetailReq) (*PostDetailResp, error)
	PostList(context.Context, *PostListReq) (*PostListResp, error)
	mustEmbedUnimplementedPostServiceServer()
}

// UnimplementedPostServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostServiceServer struct{}

func (UnimplementedPostServiceServer) PostCreate(context.Context, *PostCreateReq) (*PostCreateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCreate not implemented")
}
func (UnimplementedPostServiceServer) PostDelete(context.Context, *PostDeleteReq) (*PostDeleteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDelete not implemented")
}
func (UnimplementedPostServiceServer) PostUpdate(context.Context, *PostUpdateReq) (*PostUpdateResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostUpdate not implemented")
}
func (UnimplementedPostServiceServer) PostDetail(context.Context, *PostDetailReq) (*PostDetailResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostDetail not implemented")
}
func (UnimplementedPostServiceServer) PostList(context.Context, *PostListReq) (*PostListResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostList not implemented")
}
func (UnimplementedPostServiceServer) mustEmbedUnimplementedPostServiceServer() {}
func (UnimplementedPostServiceServer) testEmbeddedByValue()                     {}

// UnsafePostServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostServiceServer will
// result in compilation errors.
type UnsafePostServiceServer interface {
	mustEmbedUnimplementedPostServiceServer()
}

func RegisterPostServiceServer(s grpc.ServiceRegistrar, srv PostServiceServer) {
	// If the following call pancis, it indicates UnimplementedPostServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostService_ServiceDesc, srv)
}

func _PostService_PostCreate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostCreateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PostCreate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PostCreate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PostCreate(ctx, req.(*PostCreateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PostDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDeleteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PostDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PostDelete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PostDelete(ctx, req.(*PostDeleteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PostUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostUpdateReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PostUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PostUpdate_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PostUpdate(ctx, req.(*PostUpdateReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PostDetail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostDetailReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PostDetail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PostDetail_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PostDetail(ctx, req.(*PostDetailReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _PostService_PostList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostListReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostServiceServer).PostList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostService_PostList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostServiceServer).PostList(ctx, req.(*PostListReq))
	}
	return interceptor(ctx, in, info, handler)
}

// PostService_ServiceDesc is the grpc.ServiceDesc for PostService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "post.PostService",
	HandlerType: (*PostServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCreate",
			Handler:    _PostService_PostCreate_Handler,
		},
		{
			MethodName: "PostDelete",
			Handler:    _PostService_PostDelete_Handler,
		},
		{
			MethodName: "PostUpdate",
			Handler:    _PostService_PostUpdate_Handler,
		},
		{
			MethodName: "PostDetail",
			Handler:    _PostService_PostDetail_Handler,
		},
		{
			MethodName: "PostList",
			Handler:    _PostService_PostList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "post.proto",
}
