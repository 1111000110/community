// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.9.0

package message

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	messageFieldNames          = builder.RawFieldNames(&Message{})
	messageRows                = strings.Join(messageFieldNames, ",")
	messageRowsExpectAutoSet   = strings.Join(stringx.Remove(messageFieldNames, "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	messageRowsWithPlaceHolder = strings.Join(stringx.Remove(messageFieldNames, "`message_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	messageModel interface {
		Insert(ctx context.Context, data *Message) (sql.Result, error)
		FindOne(ctx context.Context, messageId int64) (*Message, error)
		Update(ctx context.Context, data *Message) error
		Delete(ctx context.Context, messageId int64) error
	}

	defaultMessageModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Message struct {
		SessionId   string `db:"session_id"`
		MessageId   int64  `db:"message_id"`
		SendId      int64  `db:"send_id"`
		ReplyId     int64  `db:"reply_id"`
		CreateTime  int64  `db:"create_time"`
		UpdateTime  int64  `db:"update_time"`
		Status      int64  `db:"status"`
		Text        string `db:"text"`
		MessageType int64  `db:"message_type"`
		Addition    string `db:"addition"`
	}
)

func newMessageModel(conn sqlx.SqlConn) *defaultMessageModel {
	return &defaultMessageModel{
		conn:  conn,
		table: "`message`",
	}
}

func (m *defaultMessageModel) Delete(ctx context.Context, messageId int64) error {
	query := fmt.Sprintf("delete from %s where `message_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, messageId)
	return err
}

func (m *defaultMessageModel) FindOne(ctx context.Context, messageId int64) (*Message, error) {
	query := fmt.Sprintf("select %s from %s where `message_id` = ? limit 1", messageRows, m.table)
	var resp Message
	err := m.conn.QueryRowCtx(ctx, &resp, query, messageId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultMessageModel) Insert(ctx context.Context, data *Message) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?)", m.table, messageRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.SessionId, data.MessageId, data.SendId, data.ReplyId, data.Status, data.Text, data.MessageType, data.Addition)
	return ret, err
}

func (m *defaultMessageModel) Update(ctx context.Context, data *Message) error {
	query := fmt.Sprintf("update %s set %s where `message_id` = ?", m.table, messageRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.SessionId, data.SendId, data.ReplyId, data.Status, data.Text, data.MessageType, data.Addition, data.MessageId)
	return err
}

func (m *defaultMessageModel) tableName() string {
	return m.table
}
