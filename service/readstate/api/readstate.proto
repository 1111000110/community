syntax = "proto3";

package readState;
option go_package = "./";

service ReadState {
  rpc GetUserChannelsReadStates(UserChannelsReq) returns (ChannelReadStatesResp);
  rpc OnSendChannelIM(OnSendChannelIMReq) returns (EmptyResponse);
  rpc ClearReadStates(ClearReadStatesReq) returns (EmptyResponse);
  rpc AddUser (AddUserReq) returns (EmptyResponse);
  rpc DelUser (DelUserReq) returns (EmptyResponse);
  rpc GetHaveOneReadUser(ChannelID) returns (I64IDList);
  rpc DelChannelReadStates(ChannelIDs) returns (EmptyResponse);
  rpc DelChannelReadStatesByMsgId(ChannelMsgId) returns (EmptyResponse);
}
message I64IDList{
  repeated int64 ids = 1;
}
message ChannelID{
  int64 channel_id = 1;
}

message ChannelIDs{
  repeated int64 channel_id = 1;
}

message ChannelMsgId{
  int64 channel_id = 1;
  int64 msg_id = 2;
  repeated int64 user_ids = 3;
}

message ClearReadStatesReq{
  int64 user_id = 1;
  map<int64, int32> channel_id_type = 2;
  int64 clear_time = 3;
}
message DelUserReq{
  int64 user_id = 1;
  repeated int64 channel_id = 2;
}

message AddUserReq{
  int64 user_id = 1;
  map<int64, int32> channel_id_type = 2;
  int64 add_time = 3;
}

message OnSendChannelIMReq{
  int64 channel_id = 1;
  int64 message_id = 2;
  int64 create_time = 3;
  int64 user_id = 4;
  bool mentionAll = 5;
  bool mentionHere = 7;
  repeated  int64 mention_user_ids = 6;
  int32 channel_type = 8;
}

message ChannelReadStatesResp{
  repeated ChannelReadStates channel_read_states = 1;
}

message ChannelReadStates{
  int64 channel_id = 1;
  int32 unread_count = 2;
  int32 mention_count = 3;
  int64 message_id = 4;
  int64 last_read_time = 5;
  int64 last_at_message_id = 6;
}

message UserChannelsReq {
  int64 user_id = 1;
  map<int64, int32>channel_type = 2;
}

message EmptyResponse {
}