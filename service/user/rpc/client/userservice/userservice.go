// Code generated by goctl. DO NOT EDIT.
// goctl 1.9.0
// Source: user.proto

package userservice

import (
	"context"

	"community/service/user/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	Relations               = __.Relations
	User                    = __.User
	UserDeleteReq           = __.UserDeleteReq
	UserDeleteResp          = __.UserDeleteResp
	UserLoginReq            = __.UserLoginReq
	UserLoginResp           = __.UserLoginResp
	UserQueryReq            = __.UserQueryReq
	UserQueryResp           = __.UserQueryResp
	UserRegisterReq         = __.UserRegisterReq
	UserRegisterResp        = __.UserRegisterResp
	UserRelationsGetReq     = __.UserRelationsGetReq
	UserRelationsGetResp    = __.UserRelationsGetResp
	UserRelationsUpdateReq  = __.UserRelationsUpdateReq
	UserRelationsUpdateResp = __.UserRelationsUpdateResp
	UserUpdateReq           = __.UserUpdateReq
	UserUpdateResp          = __.UserUpdateResp

	UserService interface {
		// UserLogin 用户登录
		UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error)
		// UserRegister 用户注册
		UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error)
		// UserDelete 用户删除
		UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error)
		// UserUpdate 用户信息更新
		UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error)
		// UserQuery 用户信息查询
		UserQuery(ctx context.Context, in *UserQueryReq, opts ...grpc.CallOption) (*UserQueryResp, error)
	}

	defaultUserService struct {
		cli zrpc.Client
	}
)

func NewUserService(cli zrpc.Client) UserService {
	return &defaultUserService{
		cli: cli,
	}
}

// UserLogin 用户登录
func (m *defaultUserService) UserLogin(ctx context.Context, in *UserLoginReq, opts ...grpc.CallOption) (*UserLoginResp, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserLogin(ctx, in, opts...)
}

// UserRegister 用户注册
func (m *defaultUserService) UserRegister(ctx context.Context, in *UserRegisterReq, opts ...grpc.CallOption) (*UserRegisterResp, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserRegister(ctx, in, opts...)
}

// UserDelete 用户删除
func (m *defaultUserService) UserDelete(ctx context.Context, in *UserDeleteReq, opts ...grpc.CallOption) (*UserDeleteResp, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserDelete(ctx, in, opts...)
}

// UserUpdate 用户信息更新
func (m *defaultUserService) UserUpdate(ctx context.Context, in *UserUpdateReq, opts ...grpc.CallOption) (*UserUpdateResp, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserUpdate(ctx, in, opts...)
}

// UserQuery 用户信息查询
func (m *defaultUserService) UserQuery(ctx context.Context, in *UserQueryReq, opts ...grpc.CallOption) (*UserQueryResp, error) {
	client := __.NewUserServiceClient(m.cli.Conn())
	return client.UserQuery(ctx, in, opts...)
}
