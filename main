#!/usr/bin/env bash

# 打印当前目录
echo "Current directory: $(pwd)"

# 启动 Docker Compose 服务
echo "Starting Docker Compose services..."
docker-compose up -d
echo "Docker Compose services started."

# 等待 Docker 服务启动完成
echo "Waiting for Docker services to be ready..."
echo "Waiting for MongoDB..."
for i in {1..60}; do
    if nc -z 127.0.0.1 27017; then
        echo "MongoDB is ready."
        break
    else
        echo "Waiting for MongoDB... ($i/60)"
        sleep 2
    fi
done

echo "Waiting for MySQL..."
for i in {1..60}; do
    if nc -z 127.0.0.1 3306; then
        echo "MySQL is ready."
        break
    else
        echo "Waiting for MySQL... ($i/60)"
        sleep 2
    fi
done

echo "Waiting for Redis..."
for i in {1..60}; do
    if nc -z 127.0.0.1 6379; then
        echo "Redis is ready."
        break
    else
        echo "Waiting for Redis... ($i/60)"
        sleep 2
    fi
done

echo "Waiting for Scylla..."
for i in {1..60}; do
    if nc -z 127.0.0.1 9042; then
        echo "Scylla is ready."
        break
    else
        echo "Waiting for Scylla... ($i/60)"
        sleep 2
    fi
done

echo "Waiting for Kafka..."
for i in {1..60}; do
    if nc -z 127.0.0.1 9092; then
        echo "Kafka is ready."
        break
    else
        echo "Waiting for Kafka... ($i/60)"
        sleep 2
    fi
done

# 如果关键服务未能启动，退出脚本
if ! nc -z 127.0.0.1 27017 || ! nc -z 127.0.0.1 3306 || ! nc -z 127.0.0.1 6379; then
    echo "Critical Docker services failed to start. Exiting..."
    docker-compose down
    exit 1
fi

# 启动 etcd 在后台运行，并将日志输出到文件
etcd --data-dir=./etcd-data > etcd.log 2>&1 &
ETCD_PID=$!
echo "etcd started with PID $ETCD_PID"

# 等待 etcd 启动完成
echo "Waiting for etcd to start..."
for i in {1..100}; do
    if nc -z 127.0.0.1 2379; then
        echo "etcd started successfully."
        break
    else
        echo "Waiting for etcd to start... ($i/100)"
        sleep 1
    fi
done

# 如果 etcd 未能启动，退出脚本
if ! nc -z 127.0.0.1 2379; then
    ./end
     echo "etcd failed to start. Exiting..."
    exit 1
fi

# 编译并运行服务函数
run_service() {
    local service_path=$1
    # 取路径最后两级目录作为服务名，比如 stevice/user/rpc -> user-rpc
    local dir_name=$(basename "$service_path")
    local parent_dir=$(basename "$(dirname "$service_path")")
    local service_name="${parent_dir}-${dir_name}"
    echo "Building and starting service: $service_name in $service_path"

    cd "$service_path" || { echo "Failed to cd to $service_path"; exit 1; }

    # 找到当前目录下的 go 源码文件（假设只有一个 *.go 文件，比如 user.go 或 post.go）
    local go_file=$(ls *.go 2>/dev/null | head -n1)
    if [[ -z "$go_file" ]]; then
        echo "No go file found in $service_path"
        exit 1
    fi

    go build -o "$service_name" "$go_file"
    ./"$service_name" > "../$service_name.log" 2>&1 &
    cd - >/dev/null || exit
}

# 依次启动你的服务，传入路径即可
run_service "service/user/rpc"
run_service "service/user/api"
run_service "service/post/rpc"
run_service "service/post/api"

echo "All services started successfully."

echo ""
echo "To stop all services:"
echo "  ./end              # Stop services (keep data)"
echo "  ./end --clean-data # Stop services and clean all data"