// Code generated by goctl. DO NOT EDIT.
// versions:
//  goctl version: 1.8.3

package account

import (
	"context"
	"database/sql"
	"fmt"
	"strings"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	accountFieldNames          = builder.RawFieldNames(&Account{})
	accountRows                = strings.Join(accountFieldNames, ",")
	accountRowsExpectAutoSet   = strings.Join(stringx.Remove(accountFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	accountRowsWithPlaceHolder = strings.Join(stringx.Remove(accountFieldNames, "`user_id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	accountModel interface {
		Insert(ctx context.Context, data *Account) (sql.Result, error)
		FindOne(ctx context.Context, userId int64) (*Account, error)
		FindOneByPhone(ctx context.Context, phone string) (*Account, error)
		Update(ctx context.Context, data *Account) error
		Delete(ctx context.Context, userId int64) error
	}

	defaultAccountModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Account struct {
		UserId    int64  `db:"user_id"`
		Password  string `db:"password"`   // 用户密码
		Phone     string `db:"phone"`      // 手机号码
		Gender    string `db:"gender"`     // 性别，male|female|unknown
		Nickname  string `db:"nickname"`   // 昵称
		Avatar    string `db:"avatar"`     // 头像URL
		BirthDate int64  `db:"birth_date"` // 出生日期（时间戳）
		Role      string `db:"role"`       // 用户角色
		Status    int64  `db:"status"`     // 用户状态
		Email     string `db:"email"`      // 电子邮箱
		Ct        int64  `db:"ct"`         // 创建时间
		Ut        int64  `db:"ut"`         // 更新时间
	}
)

func newAccountModel(conn sqlx.SqlConn) *defaultAccountModel {
	return &defaultAccountModel{
		conn:  conn,
		table: "`account`",
	}
}

func (m *defaultAccountModel) Delete(ctx context.Context, userId int64) error {
	query := fmt.Sprintf("delete from %s where `user_id` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, userId)
	return err
}

func (m *defaultAccountModel) FindOne(ctx context.Context, userId int64) (*Account, error) {
	query := fmt.Sprintf("select %s from %s where `user_id` = ? limit 1", accountRows, m.table)
	var resp Account
	err := m.conn.QueryRowCtx(ctx, &resp, query, userId)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) FindOneByPhone(ctx context.Context, phone string) (*Account, error) {
	var resp Account
	query := fmt.Sprintf("select %s from %s where `phone` = ? limit 1", accountRows, m.table)
	err := m.conn.QueryRowCtx(ctx, &resp, query, phone)
	switch err {
	case nil:
		return &resp, nil
	case sqlx.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAccountModel) Insert(ctx context.Context, data *Account) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, accountRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Password, data.Phone, data.Gender, data.Nickname, data.Avatar, data.BirthDate, data.Role, data.Status, data.Email, data.Ct, data.Ut)
	return ret, err
}

func (m *defaultAccountModel) Update(ctx context.Context, newData *Account) error {
	query := fmt.Sprintf("update %s set %s where `user_id` = ?", m.table, accountRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, newData.Password, newData.Phone, newData.Gender, newData.Nickname, newData.Avatar, newData.BirthDate, newData.Role, newData.Status, newData.Email, newData.Ct, newData.Ut, newData.UserId)
	return err
}

func (m *defaultAccountModel) tableName() string {
	return m.table
}
