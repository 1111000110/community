// Code generated by goctl. DO NOT EDIT.
// goctl 1.8.3
// Source: weather.proto

package weatherservice

import (
	"context"

	"community.com/infra/weather/rpc/pb"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	WeatherAddDataReq  = __.WeatherAddDataReq
	WeatherAddDataResp = __.WeatherAddDataResp

	WeatherService interface {
		WeatherAddData(ctx context.Context, in *WeatherAddDataReq, opts ...grpc.CallOption) (*WeatherAddDataResp, error)
	}

	defaultWeatherService struct {
		cli zrpc.Client
	}
)

func NewWeatherService(cli zrpc.Client) WeatherService {
	return &defaultWeatherService{
		cli: cli,
	}
}

func (m *defaultWeatherService) WeatherAddData(ctx context.Context, in *WeatherAddDataReq, opts ...grpc.CallOption) (*WeatherAddDataResp, error) {
	client := __.NewWeatherServiceClient(m.cli.Conn())
	return client.WeatherAddData(ctx, in, opts...)
}
